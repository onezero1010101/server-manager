name: Docker CI

on:
  push:
    branches:
      - main # or your default branch, e.g., master
  pull_request:
    branches:
      - main # or your default branch, e.g., master

jobs:
  build-and-test-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # This permission is required to push to GitHub Container Registry

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Define image name and tag
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }} # ghcr.io/owner/repo-name
        tags: |
          type=sha
          type=ref,event=branch
          type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }} # Tag 'latest' only on default branch

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./poller # Adjusted to your specified Dockerfile path
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    # - name: Run tests inside Docker container
    #   # Replace 'your-test-command-here' with the actual command to run your tests inside the container.
    #   # This will run tests on the image that was just built and pushed to GHCR.
    #   # Example: docker run ghcr.io/${{ github.repository }}:latest npm test
    #   # Or: docker run ghcr.io/${{ github.repository }}:latest python -m pytest
    #   run: |
    #     IMAGE_TAG=${{ steps.meta.outputs.tags }}
    #     # It's good practice to pull the image you just pushed to ensure you're testing the remote version.
    #     docker pull $IMAGE_TAG
    #     docker run $IMAGE_TAG your-test-command-here